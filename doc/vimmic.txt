*vimmic.txt*  For Vim version 8.0.  Last change: 2017 Jun 19


		VIMMIC REFERENCE MANUAL    by Charles Gueunet


				*vimmic*
Welcome to VimMic! VimMic is well-documented, well commented Vim configuration
along with a set of plugins for the Vim text editor. It stand for Vim Make It
Clever and is aimed to keep this editor light and efficient. It should be easy
to use for anyone who is familiar with Vim.

Using Vimmic						vimmic

1. Beginner's guide        		|vimmic-beginner|
2. Vimmic configuration    		|vimmic-config|
	2.1 Pre-configuration  		|vimmic-preconf|
	2.2 Post-configuration 		|vimmic-postconf|
3. Plugins configuration   		|vimmic-plugins|
4. Shortcuts               		|vimmic-shortcuts|
5. Advanced                		|vimmic-advanced|
	5.1 C/CPP              		|vimmic-c-cpp|

General remarks:~
----------------

This configuration is made in order to suit every Vim user's need. If some
parameters are in conflict with your general Vim usage, please let an issue
on the Github page.

Syntax of this help:~
--------------------

Shotcuts are written inside { }. Two keys that are meant to be pressed
simultaneously are separated by a "+", two keys that have to be pressed in
sequence by a " ".
When coming from a plugin, the plugin name is recalled between ( ).

Examples:
-`{<Leader> v}:` is pressing "<Leader>" then "v".
-`{<Ctrl+f>}(clang-format):` is pressing "<Ctrl>" and "f" simultaneously. This
shortcut come from "clang-format".

Note: see |vimmic-shortcuts|.


==============================================================================
1. Beginner's guide				*vimmic-beginner*

The main tool to start using this configuration is the quickmenu bar. It can
be summoned using <F12>. The first section of this pane contains functions to
interact with the configuration. For each of these function the corresponding
shortcut is recalled in the 'statusline'. The next section of this pane leads
to these man pages and the last one gives access to functions made to interact
with the text.

Basic usage:~
------------

The leader key is defined on comma {,}, look at |vimmic-preconfig| to change
it. The firsts steps to follow when starting using Vimmic is certainly to read
the |vimmic-config| section in order to create a personalized experience and
the |vimmic-shortcuts| to take your hands on the available tools.

Update:~
-------

Updating from the Git repository can be done with:

`$ git pull --recursive`

Then, you can update all your plugins inside Vim with

`:Update`

This is a good usage to regularly update your plugins inside the editor.


==============================================================================
2. Vimmic configuration 		*vimmic-config*

This configuration is structured as follows:
`Vimmic/`               	Vimmic install directory: Git directory
    `-.vimrc`           	Load Vimmic environment, configuration and plugins

    `-config/`
        `+editor.vim`   	Vim editor parameters (swap, tab, indent...)
        `+shortcuts.vim`	Vim shortcuts and operator (no plugins here)
        `+functions.vim`	Some cool functions to Update, Debug,...
        `+plugins/`     	All plugins configurations (see |vimmic-plugins|)

    `-extra/`           	Example files for personalization of Vimmic

You can customize Vimmic using two files (see the "extra/" folder):
-"$HOME/|.vimrc.preconf|" to add/remove plugins and features
-"$HOME/|.vimrc.postconf|" to configure colorscheme, plugins and personal stuff

2.1 Pre-configuration			*vimrc-preconf* *.vimrc.preconf*~
---------------------

The optional "$HOME/.vimrc.preconf" file can be used to add or remove plugins.
A sample version of this file is located under the "extra/" folder.
Adding a new plugin from a Github repository can be done using the `dein#add`
function:

`call dein#add('maintainers/repo')`

To disable a plugin fron the original configuration,
you can use the `dein#disable` function:

`call dein#disable('repo')`

In both of the case, it is recommended to restart Vim,
apply the `:Update` command and restart again to apply your modifications.

This file also lets you disable some features of the configuration:
- `let g:disable_defaultColors =1`            		"disables all theming colors and words highlight defined
- `let g:disable_highlightWordUnderCursor =1` 		"disables the current word highlight
- `let g:disable_margin =1`                   		"disable the 120 characters margin

Note: Use this file if you want to change you default leader key.

2.2 Post-configuration			*vimrc-postconf* *.vimrc.postconf*~
----------------------

The optional "$HOME/.vimrc.postconf" file can be used overwrite everything
defined in Vimmic. A sample version is located under the "extra/" folder. This
is the good place to adapt Vimmic to your needs. You can add here all your
usual ".vimrc" to add features and change colors. You can also overwite Vimmic
defined configuration.

Note: To configure the plugins you have added, it is better to do it the
Vimmic's way like explained in the next chapter |vimmic-plugins|.


==============================================================================
3. Plugins configuration		*vimmic-plugins*

Plugins configuration are located on the "config/plugins/" folder
Each file is structured as follows:
[...]

Snippets: the "snippets/" folder + Submodules


==============================================================================
4. Shortcuts            		*vimmic-shortcuts*

Sub-chapters nedded here
- GUI
- Text
- Completion


==============================================================================
5. Advanced             		*vimmic-advanced*

5.1 C/CPP:               		*vimmic-c-cpp*~
----------

- Format code
- Syntax debug with GCC
- Completion?
