*vimmic.txt*  For Vim version 8.0.  Last change: 2017 Jun 19


		VIMMIC REFERENCE MANUAL    by Charles Gueunet


				*vimmic*
Welcome to VimMic! VimMic is well-documented, well commented Vim configuration
along with a set of plugins for the Vim text editor. It stand for Vim Make It
Clever and is aimed to keep this editor light and efficient. It should be easy
to use for anyone who is familiar with Vim.

Using Vimmic						vimmic

1. Beginner's guide        		|vimmic-beginner|
2. Vimmic configuration    		|vimmic-config|
	2.1 Pre-configuration
	2.2 Post-configuration
3. Plugins configuration   		|vimmic-plugins|
4. Shortcuts               		|vimmic-shortcuts|
	4.1 UI Shortcuts
	4.2 Editor Shotcuts
	4.3 Completion Shotcuts
	4.4 Regions
	4.5 Operators
5. Advanced                		|vimmic-advanced|
	5.1 Snippets
	5.2 C/CPP

General remarks:~
----------------

This configuration is made in order to suit every Vim user's need. If some
parameters are in conflict with your general Vim usage, please let an issue
on the Github page.

Syntax of this help:~
--------------------

Shotcuts are written inside { }. Two keys that are meant to be pressed
simultaneously are separated by a "+", two keys that have to be pressed in
sequence by a " ".
When coming from a plugin, the plugin name is recalled between ( ).

Examples:
-`{<Leader> v}`: is pressing "<Leader>" then "v".
-`{<Ctrl+f>}`(clang-format): is pressing "<Ctrl>" and "f" simultaneously. This
shortcut come from "clang-format".

Note: see |vimmic-shortcuts|.


==============================================================================
1. Beginner's guide				*vimmic-beginner*

The main tool to start using this configuration is the quickmenu bar. It can
be summoned using <F12>. The first section of this pane contains functions to
interact with the configuration. For each of these function the corresponding
shortcut is recalled in the 'statusline'. The next section of this pane leads
to these man pages and the last one gives access to functions made to interact
with the text.

Basic usage:~
------------

The leader key is defined on comma {,}, look at |vimmic-preconfig| to change
it. The firsts steps to follow when starting using Vimmic is certainly to read
the |vimmic-config| section in order to create a personalized experience and
the |vimmic-shortcuts| to take your hands on the available tools.

Update:~
-------

Updating from the Git repository can be done with:

`$ git pull --recursive`

Then, you can update all your plugins inside Vim with

`:Update`

This is a good usage to regularly update your plugins inside the editor.


==============================================================================
2. Vimmic configuration 		*vimmic-config*

This configuration is structured as follows:
`Vimmic/`               	Vimmic install directory: Git directory
    `-.vimrc`           	Load Vimmic environment, configuration and plugins

    `-config/`
        `+editor.vim`   	Vim editor parameters (swap, tab, indent...)
        `+shortcuts.vim`	Vim shortcuts and operator (no plugins here)
        `+functions.vim`	Some cool functions to Update, Debug,...
        `+plugins/`     	All plugins configurations (see |vimmic-plugins|)

    `-extra/`           	Example files for personalization of Vimmic

You can customize Vimmic using two files (see the "extra/" folder):
-"$HOME/.vimrc.preconf" to add/remove plugins and features
-"$HOME/.vimrc.postconf" to configure colorscheme, plugins and personal stuff

2.1 Pre-configuration:~
----------------------

The optional "$HOME/.vimrc.preconf" file can be used to add or remove plugins.
A sample version of this file is located under the "extra/" folder.
Adding a new plugin from a Github repository can be done using the `dein#add`
function:

`call dein#add('maintainer/repo')`

To disable a plugin fron the original configuration,
you can use the `dein#disable` function:

`call dein#disable('repo')`

In both of the case, it is recommended to restart Vim,
apply the `:Update` command and restart again to apply your modifications.

This file also lets you disable some features of the configuration:
- `let g:disable_defaultColors =1`            		"disables all theming colors and words highlight defined
- `let g:disable_highlightWordUnderCursor =1` 		"disables the current word highlight
- `let g:disable_margin =1`                   		"disable the 120 characters margin

Note: Use this file if you want to change you default leader key.

2.2 Post-configuration:~
-----------------------

The optional "$HOME/.vimrc.postconf" file can be used to overwrite everything
defined in Vimmic. A sample version is located under the "extra/" folder.
This is the good place to adapt Vimmic to your needs. You can copy here all
your usual ".vimrc" to add features and change colors. You can also overwite
Vimmic defined configuration.

Note: To configure the plugins you have added, it is better to do it the
Vimmic's way like explained in the next chapter |vimmic-plugins|.


==============================================================================
3. Plugins configuration		*vimmic-plugins*

Plugins configuration files are located on the "config/plugins/" folder, one
file by plugin named "pluginName".vim. These files are automatically loaded by
Vimmic. Each one is structured as follows:

    `" maintainer/name`
    `" Plugin description`

    `[...]`

    `" Settings`
    `""""""""""`
    Variables and other plugin settings here

    `" Shortcut`
    `""""""""""`
    Plugin mapping here

    `" Theme`
    `"""""""`
    Plugin colors here

    `[...]`

All these configurations can be overwritten in the ".vimrc.postconf" (see: |vimmic-config|).
If you want to write your own, use an existing one as template.


==============================================================================
4. Shortcuts            		*vimmic-shortcuts*

Vimmic define a lot of new shortcut to improve user efficiency.
Here is how to use them:

4.1 UI Shortcuts:~
-----------------

File navigation~

-`{<Leader> n}`(nerd tree) file navigation
-`{<Leader> f}`(nerd tree) file navigation with cursor on current file

Text navigation~

-`{<Leader> u}`(undo tree) visualize your Vim undo tree
-`{<Leader> b}`(tag bar) show tags
-`{<Leader> g d}`(gitgutter/signify) show versionning diff of the current chunk

Syntax check~

`{<Leader> e}`(syntastic) open the error window

4.2 Editor Shortcuts:~
---------------------

Buffer navigation~

-`{<Leader> <Left>/<Right>}` go to previous/next buffer
-`{<Leader> <NUM>}` Go to buffer number NUM (not with Number keypad)
-`{<Leader> <Bottom>}` list opened buffers
-`{<Leader> <Top>}` move between opened buffer, close buffer
-`{<Leader> <Tab>}` go back to previous buffer

Window navigation~

-`{<Leader> </>}` to go on tab Left or Right
-`{<Ctrl>+w <Arrow>}` or `{<Ctrl>+h/j/k/l}` to move cursor one the designated pane
-`{<Leader> v}` Split vertically
-`{<Leader> h}` Split horizontally
Note: You can use the mouse or the ( `:res +/-<NUM>` or `:vertical res +/-<NUM>` ) to change pane size.

Text navigation~

-`{<+>/<->}`(expand region) grow or dim current selection
-`{<Leader> <space>}` stop highlighting current search
-`{<Leader> <Leader> <Move operator>}`(easymotion) motion with preview on text
-`{<Ctrl>+a}`(delimit mate) go out of current scope ( {}, [], "", (),...)

Text modification~

-`{<Leader> r}`(vim-over) global replace word under cursor
-`{<Ctrl>+r}`(vim-over) on visual selection, replace word
-`{<Leader> g c>`(nerdcommenter) comment actual line/selection (there is also a `gc` operator)

4.3 Completion Shortcuts:~
-------------------------

-`{<Ctrl>+<Space>}` Vim completion ( `{<Ctrl>+n}` )
-`{<Ctrl>+x x}` Clerver (omni) completion ( `{<Ctrl>+x o}` )

4.4 Regions:~
------------

You can test these by using visual selection: `{v i/a <region>}`

-`L` current line
-`n{` next { } block
-`,`(vim-textobj-parameter) function parameter
-`i`(vim-textobj-indent) current indentation block
-`e`(vim-textobj-entire) the entire document

4.5 Operators:~
-------------

- `gc`(vim-commentary): toggle comment

==============================================================================
5. Advanced             		*vimmic-advanced*

5.1 Snippets:~
-------------

- Existing
- Add custom

5.2 C/CPP:~
----------

- Format code
- Syntax debug with GCC
- Completion?
